import { Request, Response, RequestHandler } from 'express';
import { Rental, RentalStatus } from '../models/Rental';
import { Clothes } from '../models/Clothes';
import path from 'path';
import fs from 'fs';
import { AppDataSource } from '../config/database';
import { generateOrderCode } from '../utils/orderCode';
import { AuthRequest } from '../types';
import payos from '../config/payos';
import { Not, In } from 'typeorm';
import { uploadToCloudinary } from '../middleware/uploadToCloud';

const rentalRepository = AppDataSource.getRepository(Rental);
const clothesRepository = AppDataSource.getRepository(Clothes);

const BANK_ID = "970422"; // ID ng√¢n h√†ng c·ªßa b·∫°n
const ACCOUNT_NO = "3001102007"; // S·ªë t√†i kho·∫£n c·ªßa b·∫°n
const TEMPLATE = "fypnK7r";
const QR_EXPIRE_MINUTES = 15; // QR h·∫øt h·∫°n sau 15 ph√∫t

interface PayOSError extends Error {
  response?: {
    data: any;
    status: number;
  };
}

const generateVietQRUrl = (amount: number, orderCode: string) => {
  return `https://img.vietqr.io/image/vietinbank-113366668888-compact2.jpg?amount=${amount}&addInfo=${orderCode}`;
};

// Th√™m h√†m ƒë·ªÉ ki·ªÉm tra giao d·ªãch ng√¢n h√†ng
const checkBankTransaction = async (orderCode: string): Promise<boolean> => {
  try {
    // TODO: Implement actual bank transaction check
    // ƒê√¢y l√† n∆°i b·∫°n s·∫Ω t√≠ch h·ª£p API c·ªßa ng√¢n h√†ng ƒë·ªÉ ki·ªÉm tra giao d·ªãch
    return false;
  } catch (error) {
    console.error('Error checking bank transaction:', error);
    return false;
  }
};

export default {
  create: async (req: AuthRequest, res: Response) => {
    try {
      const rentalData = req.body;
      const file = req.file;
      const user = req.user;

      if (!user) {
        return res.status(401).json({ message: 'Unauthorized' });
      }

      // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
      const clothes = await clothesRepository.findOne({
        where: { id: rentalData.clothesId }
      });

      if (!clothes) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' });
      }

      // Upload CCCD to Cloudinary if provided
      let identityCardUrl = '';
      if (file) {
        try {
          identityCardUrl = await uploadToCloudinary(file, 'identity_cards');
        } catch (error) {
          console.error('Cloudinary upload error:', error);
          return res.status(500).json({ message: 'L·ªói khi t·∫£i l√™n CCCD' });
        }
      }

      // T·∫°o m√£ ƒë∆°n h√†ng
      const orderCode = generateOrderCode();
      
      // T·∫°o URL thanh to√°n PayOS
      const amount = Number(rentalData.totalAmount);

      const paymentData = {
        orderCode: parseInt(orderCode.replace(/\D/g, '')),
        amount,
        description: orderCode, // Ch·ªâ d√πng m√£ ƒë∆°n h√†ng l√†m n·ªôi dung chuy·ªÉn kho·∫£n
        cancelUrl: `${process.env.FRONTEND_URL}/cancel`,
        returnUrl: `${process.env.FRONTEND_URL}/success`,
        items: [{
          name: clothes.name,
          price: clothes.rentalPrice,
          quantity: 1
        }]
      };

      let paymentResponse;
      if (rentalData.paymentMethod === 'transfer') {
        paymentResponse = await payos.createPaymentLink(paymentData);

        if (!paymentResponse.checkoutUrl) {
          return res.status(400).json({ 
            message: 'Kh√¥ng th·ªÉ t·∫°o link thanh to√°n' 
          });
        }
      }

      // L∆∞u th√¥ng tin ƒë∆°n h√†ng
      const tempRentalData: Partial<Rental> = {
        orderCode,
        userId: user.id,
        clothesId: clothes.id,
        customerName: rentalData.customerName,
        phone: rentalData.phone,
        rentDate: new Date(rentalData.rentDate),
        returnDate: new Date(rentalData.returnDate),
        totalAmount: amount,
        identityCard: identityCardUrl,
        status: rentalData.paymentMethod === 'cash' ? RentalStatus.PENDING : RentalStatus.PENDING_PAYMENT,
        paymentMethod: rentalData.paymentMethod,
        pickupTime: rentalData.pickupTime,
        pendingExpireAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
      };

      const rental = rentalRepository.create(tempRentalData);
      await rentalRepository.save(rental);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫ßn √°o n·∫øu thanh to√°n ti·ªÅn m·∫∑t
      if (rentalData.paymentMethod === 'cash') {
        await clothesRepository.update(clothes.id, {
          status: 'rented'
        });
      }

      // Tr·∫£ v·ªÅ response t√πy theo ph∆∞∆°ng th·ª©c thanh to√°n
      if (rentalData.paymentMethod === 'transfer' && paymentResponse?.checkoutUrl) {
        res.json({
          orderCode,
          paymentUrl: paymentResponse.checkoutUrl
        });
      } else {
        res.json({
          orderCode,
          message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng'
        });
      }

    } catch (error) {
      console.error('Error creating rental:', error);
      if (req.file) {
        // X√≥a file n·∫øu c√≥ l·ªói
        fs.unlinkSync(req.file.path);
      }
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  getAll: async (req: Request, res: Response) => {
    try {
      const rentals = await rentalRepository.find({
        relations: ['clothes'],
        select: {
          id: true,
          orderCode: true,
          customerName: true,
          phone: true,
          rentDate: true,
          returnDate: true,
          totalAmount: true,
          status: true,
          identityCard: true,
          clothes: {
            id: true,
            name: true,
            image: true
          }
        }
      });

      console.log('Rentals with identity cards:', rentals);
      res.json(rentals);
    } catch (error) {
      console.error('Error getting rentals:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  updateStatus: (async (req, res) => {
    try {
      const { id } = req.params;
      const { status } = req.body;

      const rental = await rentalRepository.findOne({
        where: { id: Number(id) },
        relations: ['clothes']
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™' });
      }

      // X·ª≠ l√Ω theo t·ª´ng tr·∫°ng th√°i
      switch (status) {
        case 'approved':
          // Khi x√°c nh·∫≠n ƒë∆°n h√†ng
          await rentalRepository.update(id, { 
            status,
            approvedAt: new Date().toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' }) 
          });
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫ßn √°o th√†nh ƒëang cho thu√™
          await clothesRepository.update(rental.clothesId, {
            status: 'rented'
          });
          break;

        case 'completed':
          // Khi ho√†n th√†nh ƒë∆°n h√†ng (kh√°ch ƒë√£ tr·∫£ ƒë·ªì)
          await rentalRepository.update(id, { 
            status,
            completedAt: new Date().toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' })
          });
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫ßn √°o th√†nh c√≥ s·∫µn
          await clothesRepository.update(rental.clothesId, {
            status: 'available'
          });
          break;

        case 'rejected':
          // Khi t·ª´ ch·ªëi ƒë∆°n h√†ng
          await rentalRepository.update(id, { 
            status,
            rejectedAt: new Date().toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' })
          });
          // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i qu·∫ßn √°o th√†nh available
          await clothesRepository.update(rental.clothesId, {
            status: 'available'
          });
          break;

        default:
          await rentalRepository.update(id, { status });
      }

      res.json({ 
        message: `ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ${status === 'approved' ? 'x√°c nh·∫≠n' : 
          status === 'completed' ? 'ho√†n th√†nh' : 
          status === 'rejected' ? 't·ª´ ch·ªëi' : 'c·∫≠p nh·∫≠t'}`
      });
    } catch (error) {
      console.error('Error updating rental status:', error);
      res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i' });
    }
  }) as RequestHandler,

  getByPhone: (async (req: Request, res: Response) => {
    try {
      const { phone } = req.params;
      const rentals = await rentalRepository.find({
        where: { phone },
        order: { createdAt: 'DESC' }
      });
      
      res.json(rentals);
    } catch (error) {
      console.error('Error fetching user rentals:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  }) as RequestHandler,

  getMyRentals: async (req: AuthRequest, res: Response) => {
    try {
      if (!req.user) {
        return res.status(401).json({ message: 'Unauthorized' });
      }

      const rentals = await rentalRepository.find({
        where: {
          userId: req.user.id
        },
        relations: ['clothes'],
        order: { createdAt: 'DESC' }
      });

      res.json(rentals);
    } catch (error) {
      console.error('Error:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // Webhook ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£ thanh to√°n
  handlePaymentWebhook: async (req: Request, res: Response) => {
    try {
      console.log('\n===========================================');
      console.log('üîî PAYOS WEBHOOK RECEIVED');
      console.log('Time:', new Date().toISOString());
      console.log('Headers:', req.headers);
      console.log('Body:', JSON.stringify(req.body, null, 2));
      console.log('===========================================\n');

      const { orderCode, status, description } = req.body;
      console.log('üì¶ Order Details:');
      console.log('   - Order Code:', orderCode);
      console.log('   - Status:', status);
      console.log('   - Description:', description);
      
      // T√¨m ƒë∆°n h√†ng
      const orderCodeWithoutPrefix = orderCode.replace('PA', '');
      const rental = await rentalRepository.findOne({
        where: { orderCode: `PA${orderCodeWithoutPrefix}` },
        relations: ['clothes']
      });

      if (!rental) {
        console.log('‚ùå ERROR: Rental not found for orderCode:', orderCode);
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
      }

      console.log('‚úÖ Found rental:');
      console.log('   - Rental ID:', rental.id);
      console.log('   - Current Status:', rental.status);
      console.log('   - Customer:', rental.customerName);

      if (status === 'PAID' || status === 'COMPLETED') {
        console.log('üí∞ Payment successful, updating status...');
        
        await rentalRepository.update(rental.id, {
          status: RentalStatus.APPROVED,
          approvedAt: new Date()
        });

        await clothesRepository.update(rental.clothesId, {
          status: 'rented'
        });

        console.log('‚úÖ Successfully updated:');
        console.log('   - Rental status: APPROVED');
        console.log('   - Clothes status: rented');
      }

      console.log('===========================================\n');
      return res.json({ message: 'Webhook processed successfully' });
    } catch (error) {
      console.error('‚ùå ERROR processing webhook:', error);
      return res.status(500).json({ message: 'L·ªói server' });
    }
  },

  checkPaymentStatus: async (req: Request, res: Response) => {
    try {
      const { orderCode } = req.params;
      // T√¨m ƒë∆°n h√†ng v·ªõi c·∫£ 2 tr∆∞·ªùng h·ª£p c√≥ v√† kh√¥ng c√≥ prefix PA
      const searchOrderCode = orderCode.startsWith('PA') ? orderCode : `PA${orderCode}`;
      
      const rental = await rentalRepository.findOne({ 
        where: { orderCode: searchOrderCode }
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
      }

      // N·∫øu ƒë∆°n h√†ng kh√¥ng ph·∫£i ƒëang ch·ªù thanh to√°n th√¨ tr·∫£ v·ªÅ status lu√¥n
      if (rental.status !== RentalStatus.PENDING_PAYMENT) {
        return res.json({ status: rental.status });
      }

      // Ki·ªÉm tra xem QR code c√≥ h·∫øt h·∫°n ch∆∞a
      if (rental.expireAt && new Date() > rental.expireAt) {
        await rentalRepository.update(rental.id, { status: RentalStatus.REJECTED });
        await clothesRepository.update(rental.clothesId, { status: 'available' });
        return res.json({ status: RentalStatus.REJECTED, message: 'QR code ƒë√£ h·∫øt h·∫°n' });
      }

      // Ki·ªÉm tra giao d·ªãch ng√¢n h√†ng
      const isTransactionSuccess = await checkBankTransaction(orderCode);
      if (isTransactionSuccess) {
        await rentalRepository.update(rental.id, { status: RentalStatus.APPROVED });
        return res.json({ status: RentalStatus.APPROVED });
      }

      res.json({ status: rental.status });
    } catch (error) {
      console.error('Error checking payment status:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  },

  getById: (async (req: Request, res: Response) => {
    try {
      const rental = await rentalRepository.findOne({
        where: { id: parseInt(req.params.id) },
        relations: ['clothes']
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™' });
      }

      res.json(rental);
    } catch (error) {
      console.error('Error getting rental:', error);
      res.status(500).json({ message: 'Internal server error' });
    }
  }) as RequestHandler,

  updatePayment: async (req: Request, res: Response) => {
    try {
      const { orderCode } = req.params;
      const { status } = req.body;
      console.log('Updating payment status:', { orderCode, status });

      const rental = await rentalRepository.findOne({
        where: { orderCode },
        relations: ['clothes']
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      rental.status = status === 'PAID' ? RentalStatus.APPROVED : RentalStatus.CANCELLED;
      await rentalRepository.save(rental);

      // N·∫øu thanh to√°n th√†nh c√¥ng th√¨ c·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫ßn √°o
      if (status === 'PAID' && rental.clothes) {
        await clothesRepository.update(rental.clothesId, {
          status: 'rented'
        });
      }

      console.log('Payment status updated:', { orderCode, newStatus: rental.status });
      res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng' });
    } catch (error) {
      console.error('Error updating payment:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  getRentalByOrderCode: async (req: Request, res: Response) => {
    try {
      const { orderCode } = req.params;
      console.log('=== GET RENTAL BY ORDER CODE ===');
      console.log('orderCode:', orderCode);

      const rental = await rentalRepository.findOne({
        where: { orderCode },
        relations: ['clothes']
      });

      console.log('Found rental:', rental);

      if (!rental) {
        console.log('Rental not found');
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
      }

      // Tr·∫£ v·ªÅ d·ªØ li·ªáu c·∫ßn thi·∫øt
      const response = {
        orderCode: rental.orderCode,
        amount: rental.totalAmount,
        status: rental.status,
        clothesName: rental.clothes?.name
      };
      console.log('Sending response:', response);

      res.json(response);
    } catch (error) {
      console.error('Error getting rental:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  updatePaymentStatus: async (req: Request, res: Response) => {
    try {
      const { orderCode } = req.params;
      const { status } = req.body;

      const rental = await rentalRepository.findOne({
        where: { orderCode },
        relations: ['clothes']
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™' });
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu√™
      rental.status = status === 'cancelled' ? RentalStatus.CANCELLED : RentalStatus.APPROVED;
      await rentalRepository.save(rental);

      // N·∫øu thanh to√°n th√†nh c√¥ng th√¨ c·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫ßn √°o
      if (rental.status === RentalStatus.APPROVED && rental.clothes) {
        rental.clothes.status = 'rented';
        await clothesRepository.save(rental.clothes);
      }

      res.json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng' });
    } catch (error) {
      console.error('Error:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  deleteRental: async (req: Request, res: Response) => {
    try {
      const { id } = req.params;

      const rental = await rentalRepository.findOne({
        where: { id: Number(id) },
        relations: ['clothes']
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n thu√™' });
      }

      // N·∫øu ƒë∆°n ƒëang ƒë∆∞·ª£c thu√™ th√¨ kh√¥ng cho x√≥a
      if (rental.status === RentalStatus.APPROVED) {
        return res.status(400).json({ 
          message: 'Kh√¥ng th·ªÉ x√≥a ƒë∆°n ƒëang ƒë∆∞·ª£c thu√™' 
        });
      }

      // X√≥a ƒë∆°n thu√™
      await rentalRepository.remove(rental);

      res.json({ message: 'ƒê√£ x√≥a ƒë∆°n thu√™ th√†nh c√¥ng' });
    } catch (error) {
      console.error('Error:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  getRentalDates: async (req: Request, res: Response) => {
    try {
      const { clothesId } = req.params;
      console.log('Getting booked dates for clothes:', clothesId);
      
      const clothes = await clothesRepository.findOne({
        where: { id: clothesId }
      });

      if (!clothes) {
        return res.status(404).json({ 
          message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' 
        });
      }
      
      // Ch·ªâ l·∫•y c√°c ƒë∆°n c√≥ tr·∫°ng th√°i c·∫ßn thi·∫øt
      const rentals = await rentalRepository.find({
        where: {
          clothesId,
          status: In([
            RentalStatus.APPROVED, 
            RentalStatus.PENDING_PAYMENT,
            RentalStatus.PENDING
          ]),
        }
      });

      console.log('Found valid rentals:', rentals);

      const bookedDates = rentals.map(rental => ({
        start: rental.rentDate,
        end: rental.returnDate,
        status: rental.status
      }));

      return res.json(bookedDates);
    } catch (error) {
      console.error('Error getting rental dates:', error);
      return res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // Th√™m endpoint x·ª≠ l√Ω feedback
  submitFeedback: async (req: Request, res: Response) => {
    try {
      const { orderId, rating, message, images } = req.body;

      const rental = await rentalRepository.findOne({
        where: { id: orderId }
      });

      if (!rental) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
      }

      if (rental.hasFeedback) {
        return res.status(400).json({ message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√°' });
      }

      // C·∫≠p nh·∫≠t feedback
      await rentalRepository.update(orderId, {
        hasFeedback: true,
        rating,
        feedbackMessage: message,
        feedbackImages: images,
        feedbackAt: new Date()
      });

      res.json({ message: 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒë√°nh gi√°!' });
    } catch (error) {
      console.error('Error submitting feedback:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // Th√™m endpoint l·∫•y t·∫•t c·∫£ feedback cho admin
  getAllFeedbacks: async (_req: Request, res: Response) => {
    try {
      const feedbacks = await rentalRepository.find({
        where: { hasFeedback: true },
        relations: ['clothes'],
        order: { feedbackAt: 'DESC' }
      });
      res.json(feedbacks);
    } catch (error) {
      console.error('Error getting feedbacks:', error);
      res.status(500).json({ message: 'L·ªói server' });
    }
  },

  // Th√™m endpoint x·ª≠ l√Ω h·ªßy thanh to√°n
  cancelRental: async (req: Request, res: Response) => {
    try {
      const { orderCode } = req.params;
      const fullOrderCode = `PA${orderCode}`; // Th√™m prefix PA
      console.log('Attempting to cancel rental with orderCode:', fullOrderCode);
      
      const rental = await rentalRepository
        .createQueryBuilder('rental')
        .where('rental.orderCode = :orderCode', { 
          orderCode: fullOrderCode
        })
        .getOne();

      console.log('Found rental:', rental);

      if (!rental) {
        console.log('No rental found with orderCode:', fullOrderCode);
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
      }

      // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
      console.log('Current rental status:', rental.status);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i qu·∫ßn √°o v·ªÅ available
      await clothesRepository.update(rental.clothesId, { 
        status: 'available' 
      });
      console.log('Updated clothes status to available');

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
      await rentalRepository.update(rental.id, {
        status: RentalStatus.REJECTED,
        rejectedAt: new Date()
      });
      console.log('Updated rental status to rejected');

      return res.json({ message: 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i' });
    } catch (error) {
      console.error('Error cancelling rental:', error);
      return res.status(500).json({ message: 'L·ªói server' });
    }
  },
}; 